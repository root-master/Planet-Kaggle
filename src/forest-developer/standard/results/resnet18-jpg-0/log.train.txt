
--- [START 2017-05-27 22:20:38] ----------------------------------------------------------------

** some experiment setting **
	SEED    = 123
	file    = /root/share/project/pytorch/build/baseline-7/train-forest-0.py
	out_dir = /root/share/project/pytorch/results/kaggle-forest/resnet18-jpg-0

** dataset setting **
	(height,width)    = (256, 256)
	in_channels       = 3
	train_dataset.split = train-8000
	train_dataset.num = 8000
	test_dataset.split = valid-8000
	test_dataset.num  = 8000
	batch_size        = 96
	train_loader.sampler = <torch.utils.data.sampler.RandomSampler object at 0x7f3158399a58>
	test_loader.sampler  = <torch.utils.data.sampler.SequentialSampler object at 0x7f2fe0d93860>


--- [START 2017-05-27 22:21:16] ----------------------------------------------------------------

** some experiment setting **
	SEED    = 123
	file    = /root/share/project/pytorch/build/baseline-7/train-forest-0.py
	out_dir = /root/share/project/pytorch/results/kaggle-forest/resnet18-jpg-0

** dataset setting **
	(height,width)    = (256, 256)
	in_channels       = 3
	train_dataset.split = train-8000
	train_dataset.num = 8000
	test_dataset.split = valid-8000
	test_dataset.num  = 8000
	batch_size        = 96
	train_loader.sampler = <torch.utils.data.sampler.RandomSampler object at 0x7fe1f3082a20>
	test_loader.sampler  = <torch.utils.data.sampler.SequentialSampler object at 0x7fe07b349828>


--- [START 2017-05-27 22:22:24] ----------------------------------------------------------------

** some experiment setting **
	SEED    = 123
	file    = /root/share/project/pytorch/build/baseline-7/train-forest-0.py
	out_dir = /root/share/project/pytorch/results/kaggle-forest/resnet18-jpg-0

** dataset setting **
	(height,width)    = (256, 256)
	in_channels       = 3
	train_dataset.split = train-8000
	train_dataset.num = 8000
	test_dataset.split = valid-8000
	test_dataset.num  = 8000
	batch_size        = 96
	train_loader.sampler = <torch.utils.data.sampler.RandomSampler object at 0x7f48280d6a20>
	test_loader.sampler  = <torch.utils.data.sampler.SequentialSampler object at 0x7f46b049d828>

** net setting **

--- [START 2017-05-27 22:23:46] ----------------------------------------------------------------

** some experiment setting **
	SEED    = 123
	file    = /root/share/project/pytorch/build/baseline-7/train-forest-0.py
	out_dir = /root/share/project/pytorch/results/kaggle-forest/resnet18-jpg-0

** dataset setting **
	(height,width)    = (256, 256)
	in_channels       = 3
	train_dataset.split = train-8000
	train_dataset.num = 8000
	test_dataset.split = valid-8000
	test_dataset.num  = 8000
	batch_size        = 96
	train_loader.sampler = <torch.utils.data.sampler.RandomSampler object at 0x7fcb3adf79e8>
	test_loader.sampler  = <torch.utils.data.sampler.SequentialSampler object at 0x7fc9c32fd7f0>

** net setting **
<class 'net.model.resnet.ResNet'>

    def __init__(self, block, layers, num_classes=1000):
        self.inplanes = 64
        super(ResNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3,
                               bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        self.layer1 = self._make_layer(block, 64, layers[0])
        self.layer2 = self._make_layer(block, 128, layers[1], stride=2)
        self.layer3 = self._make_layer(block, 256, layers[2], stride=2)
        self.layer4 = self._make_layer(block, 512, layers[3], stride=2)
        self.avgpool = nn.AvgPool2d(7)
        self.fc = nn.Linear(512 * block.expansion, num_classes)

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

    def forward(self, x):
        x1  = self.conv1(x)
        x2  = self.bn1(x1)
        x3  = self.relu(x2)
        x4  = self.maxpool(x3)

        x5  = self.layer1(x4)
        x6  = self.layer2(x5)
        x7  = self.layer3(x6)
        x8  = self.layer4(x7)

        x9  = self.avgpool(x8)
        x10 = x9.view(x9.size(0), -1)
        x11 = self.fc(x10)

        logit = x11
        prob = F.sigmoid(logit)

        return logit,prob


** start training here! **
 optimizer=<torch.optim.sgd.SGD object at 0x7fcb3a980eb8>
 epoch   iter   rate  |  smooth_loss   |  train_loss  (acc)  |  valid_loss  (acc)  | min
----------------------------------------------------------------------------------------
  1.0      83    0.1000   |  0.194  | 0.182  0.796 | 0.205  0.787  |  0.2 min 
  2.0      83    0.1000   |  0.175  | 0.165  0.842 | 0.200  0.805  |  0.2 min 
  3.0      83    0.1000   |  0.167  | 0.183  0.822 | 0.276  0.740  |  0.2 min 
  4.0      83    0.1000   |  0.157  | 0.151  0.843 | 0.190  0.816  |  0.2 min 
  5.0      83    0.1000   |  0.155  | 0.145  0.881 | 0.189  0.803  |  0.2 min 
  6.0      83    0.1000   |  0.157  | 0.141  0.859 | 0.264  0.749  |  0.2 min 
  7.0      83    0.1000   |  0.145  | 0.149  0.871 | 0.197  0.793  |  0.2 min 
  8.0      83    0.1000   |  0.154  | 0.151  0.855 | 0.160  0.841  |  0.2 min 
  9.0      83    0.1000   |  0.140  | 0.166  0.851 | 0.190  0.814  |  0.2 min 
 10.0      83    0.1000   |  0.141  | 0.145  0.862 | 0.177  0.817  |  0.2 min 
 11.0      83    0.0100   |  0.124  | 0.135  0.886 | 0.131  0.878  |  0.2 min 
 12.0      83    0.0100   |  0.129  | 0.119  0.890 | 0.130  0.880  |  0.2 min 

--- [START 2017-05-27 22:28:18] ----------------------------------------------------------------

** some experiment setting **
	SEED    = 123
	file    = /root/share/project/pytorch/build/baseline-7/train-forest-0.py
	out_dir = /root/share/project/pytorch/results/kaggle-forest/resnet18-jpg-0

** dataset setting **
	(height,width)    = (256, 256)
	in_channels       = 3
	train_dataset.split = train-32479
	train_dataset.num = 32479
	test_dataset.split = valid-8000
	test_dataset.num  = 8000
	batch_size        = 96
	train_loader.sampler = <torch.utils.data.sampler.RandomSampler object at 0x7f528f9e5a58>
	test_loader.sampler  = <torch.utils.data.sampler.SequentialSampler object at 0x7f528f819860>

** net setting **
<class 'net.model.resnet.ResNet'>

    def __init__(self, block, layers, num_classes=1000):
        self.inplanes = 64
        super(ResNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3,
                               bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        self.layer1 = self._make_layer(block, 64, layers[0])
        self.layer2 = self._make_layer(block, 128, layers[1], stride=2)
        self.layer3 = self._make_layer(block, 256, layers[2], stride=2)
        self.layer4 = self._make_layer(block, 512, layers[3], stride=2)
        self.avgpool = nn.AvgPool2d(7)
        self.fc = nn.Linear(512 * block.expansion, num_classes)

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

    def forward(self, x):
        x1  = self.conv1(x)
        x2  = self.bn1(x1)
        x3  = self.relu(x2)
        x4  = self.maxpool(x3)

        x5  = self.layer1(x4)
        x6  = self.layer2(x5)
        x7  = self.layer3(x6)
        x8  = self.layer4(x7)

        x9  = self.avgpool(x8)
        x10 = x9.view(x9.size(0), -1)
        x11 = self.fc(x10)

        logit = x11
        prob = F.sigmoid(logit)

        return logit,prob


** start training here! **
 optimizer=<torch.optim.sgd.SGD object at 0x7f4c9c7fbf28>
 epoch   iter   rate  |  smooth_loss   |  train_loss  (acc)  |  valid_loss  (acc)  | min
----------------------------------------------------------------------------------------
  1.0     338    0.1000   |  0.160  | 0.159  0.843 | 0.204  0.783  |  1.0 min 
  2.0     338    0.1000   |  0.139  | 0.129  0.881 | 0.244  0.772  |  1.0 min 
  3.0     338    0.1000   |  0.139  | 0.131  0.888 | 0.185  0.800  |  1.0 min 
  4.0     338    0.1000   |  0.124  | 0.113  0.895 | 0.162  0.831  |  1.0 min 
  5.0     338    0.1000   |  0.124  | 0.115  0.912 | 0.174  0.828  |  1.0 min 
  6.0     338    0.1000   |  0.122  | 0.098  0.918 | 0.156  0.837  |  1.0 min 
  7.0     338    0.1000   |  0.122  | 0.123  0.882 | 0.158  0.838  |  1.0 min 
  8.0     338    0.1000   |  0.121  | 0.111  0.906 | 0.165  0.825  |  1.0 min 
  9.0     338    0.1000   |  0.114  | 0.109  0.908 | 0.168  0.850  |  1.0 min 
 10.0     338    0.1000   |  0.112  | 0.105  0.914 | 0.121  0.889  |  1.0 min 
 11.0     338    0.0100   |  0.110  | 0.110  0.913 | 0.101  0.911  |  1.0 min 
 12.0     338    0.0100   |  0.105  | 0.104  0.930 | 0.103  0.910  |  0.9 min 
 13.0     338    0.0100   |  0.100  | 0.097  0.919 | 0.104  0.909  |  0.9 min 
 14.0     338    0.0100   |  0.102  | 0.099  0.918 | 0.099  0.914  |  1.0 min 
 15.0     338    0.0100   |  0.101  | 0.103  0.914 | 0.099  0.915  |  1.0 min 
 16.0     338    0.0100   |  0.102  | 0.131  0.886 | 0.100  0.911  |  1.0 min 
 17.0     338    0.0100   |  0.100  | 0.111  0.914 | 0.110  0.898  |  1.0 min 
 18.0     338    0.0100   |  0.100  | 0.102  0.912 | 0.099  0.915  |  1.0 min 
 19.0     338    0.0100   |  0.099  | 0.099  0.912 | 0.098  0.914  |  1.0 min 
 20.0     338    0.0100   |  0.099  | 0.115  0.878 | 0.098  0.914  |  1.0 min 
 21.0     338    0.0100   |  0.098  | 0.125  0.877 | 0.097  0.916  |  1.0 min 
 22.0     338    0.0100   |  0.101  | 0.126  0.886 | 0.100  0.914  |  1.0 min 
 23.0     338    0.0100   |  0.101  | 0.114  0.897 | 0.101  0.913  |  1.0 min 
 24.0     338    0.0100   |  0.099  | 0.104  0.908 | 0.110  0.894  |  1.0 min 
 25.0     338    0.0100   |  0.100  | 0.082  0.935 | 0.107  0.900  |  1.0 min 
 26.0     338    0.0050   |  0.095  | 0.082  0.932 | 0.094  0.918  |  1.0 min 
 27.0     338    0.0050   |  0.093  | 0.097  0.942 | 0.094  0.918  |  1.1 min 
 28.0     338    0.0050   |  0.099  | 0.103  0.914 | 0.098  0.911  |  1.0 min 
 29.0     338    0.0050   |  0.097  | 0.081  0.935 | 0.096  0.914  |  1.0 min 
 30.0     338    0.0050   |  0.096  | 0.089  0.919 | 0.097  0.914  |  1.0 min 
 31.0     338    0.0050   |  0.095  | 0.100  0.919 | 0.094  0.918  |  1.0 min 
 32.0     338    0.0050   |  0.094  | 0.089  0.926 | 0.096  0.915  |  1.0 min 
 33.0     338    0.0050   |  0.091  | 0.098  0.920 | 0.096  0.914  |  1.0 min 
 34.0     338    0.0050   |  0.093  | 0.102  0.932 | 0.099  0.910  |  1.0 min 
 35.0     338    0.0050   |  0.092  | 0.085  0.925 | 0.097  0.915  |  1.0 min 
 36.0     338    0.0010   |  0.091  | 0.091  0.917 | 0.091  0.920  |  1.0 min 
 37.0     338    0.0010   |  0.087  | 0.083  0.940 | 0.091  0.920  |  1.0 min 
 38.0     338    0.0010   |  0.092  | 0.100  0.898 | 0.091  0.920  |  1.0 min 
 39.0     338    0.0010   |  0.089  | 0.098  0.914 | 0.091  0.919  |  1.0 min 
 40.0     338    0.0010   |  0.089  | 0.074  0.941 | 0.091  0.920  |  1.0 min 
 41.0     338    0.0001   |  0.092  | 0.081  0.935 | 0.091  0.920  |  1.0 min 
 42.0     338    0.0001   |  0.086  | 0.075  0.958 | 0.090  0.920  |  1.0 min 
 43.0     338    0.0001   |  0.090  | 0.089  0.924 | 0.090  0.920  |  1.0 min 

/root/share/project/pytorch/results/kaggle-forest/resnet18-jpg-0/snap/final.torch:
	all time to train=46.3 min
	test_loss=0.090350, test_acc=0.920227
